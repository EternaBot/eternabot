name: Rust

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  clippy:
    name: Clippy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - name: Cache toolchain
        id: toolchain-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: toolchain-${{ hashFiles('**/Cargo.lock') }}

      - id: install
        uses: actions-rs/toolchain@v1
        if: steps.toolchain-cache.outputs.cache-hit != 'true'
        with:
          toolchain: stable
          override: true
          components: clippy

      - name: Cache directories
        id: clippy-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/bin
            ~/.cargo/git
          key: cargo-clippy-dirs-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-clippy-dirs-

      - uses: actions-rs/cargo@v1
        name: Install Cargo Sweep
        if: steps.clippy-cache.outputs.cache-hit != 'true'
        with:
          command: install
          args: cargo-sweep

      - name: Cache build
        uses: actions/cache@v2
        with:
          path: target
          key: cargo-clippy-${{ steps.install.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-clippy-${{ steps.install.outputs.rustc_hash }}-
            cargo-clippy-

      - name: Register artifacts
        uses: actions-rs/cargo@v1
        with:
          command: sweep
          args: --stamp

      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Clean unused artifacts
        uses: actions-rs/cargo@v1
        with:
          command: sweep
          args: --file

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - id: install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  build_push:
    name: Build & Push
    runs-on: ubuntu-latest
    
    needs: [fmt, clippy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Create SHA Container Tag
        id: sha_tag
        run: |
          tag=$(cut -c 1-7 <<< $GITHUB_SHA)
          echo "::set-output name=tag::$tag"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v1

      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          cache-from: type=registry,ref=ghcr.io/eternabot/eternabot:latest
          cache-to: type=inline
          tags: |
            ghcr.io/eternabot/eternabot:latest
            ghcr.io/eternabot/eternabot:${{ steps.sha_tag.outputs.tag }}
